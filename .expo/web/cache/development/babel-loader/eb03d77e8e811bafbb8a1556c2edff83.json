{"ast":null,"code":"\"use strict\";\n\nexport var ucFirst = function ucFirst(str) {\n  if (typeof str !== \"string\") {\n    return false;\n  }\n\n  var parts = str.split(\" \"),\n      ucParts = parts.map(function (part) {\n    if (part.length > 2) {\n      part = part.toLowerCase();\n      return part.charAt(0).toUpperCase() + part.slice(1);\n    } else {\n      return part;\n    }\n  });\n  return ucParts.join(\" \");\n};\nexport var percentageChangeOver72 = function percentageChangeOver72(timeSeries) {\n  var point1 = timeSeries[0],\n      point2 = timeSeries[timeSeries.length - 1];\n\n  if (point1 != undefined && point2 != undefined) {\n    if (!isNaN(point1.y && !isNaN(point2.y))) {\n      return (parseInt(point2.y / point1.y * 100, 10) - 100) * -1;\n    }\n  }\n\n  return NaN;\n};\nexport var getRegionSource = function getRegionSource(data) {\n  var _regionData = [];\n\n  if (typeof data === \"object\") {\n    for (var key in data) {\n      if (data.hasOwnProperty(key)) {\n        var _inst = {\n          label: ucFirst(key),\n          value: key\n        };\n\n        _regionData.push(_inst);\n      }\n    }\n  }\n\n  return _regionData;\n};\nexport var getWatershedSource = function getWatershedSource(data) {\n  var region = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var _watershedData = [];\n\n  if (region !== null) {\n    if (typeof data[region] === \"object\") {\n      if (typeof data[region].watershed === \"object\") {\n        var regionData = data[region].watershed;\n\n        for (var key in regionData) {\n          if (regionData.hasOwnProperty(key)) {\n            var _inst = {\n              label: ucFirst(regionData[key][\"name\"]),\n              value: regionData[key][\"name\"]\n            };\n\n            _watershedData.push(_inst);\n          }\n        }\n      }\n    }\n  }\n\n  return _watershedData;\n};","map":{"version":3,"sources":["/Users/clinton/Apps/fc-reactnative/testapp/lib/helper/Helper.js"],"names":["ucFirst","str","parts","split","ucParts","map","part","length","toLowerCase","charAt","toUpperCase","slice","join","percentageChangeOver72","timeSeries","point1","point2","undefined","isNaN","y","parseInt","NaN","getRegionSource","data","_regionData","key","hasOwnProperty","_inst","label","value","push","getWatershedSource","region","_watershedData","watershed","regionData"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexport const ucFirst = (str) => {\n    if (typeof str !== \"string\") {\n        return false;\n    }\n    let parts = str.split(\" \"),\n        ucParts = parts.map((part) => {\n            if (part.length > 2) {\n                part = part.toLowerCase();\n                return part.charAt(0).toUpperCase() + part.slice(1);\n            } else {\n                return part;\n            }\n\n        });\n    return ucParts.join(\" \");\n};\n\nexport const percentageChangeOver72 = (timeSeries) => {\n    let point1 = timeSeries[0],\n        point2 = timeSeries[timeSeries.length - 1];\n    if (point1 != undefined && point2 != undefined){ \n        if(!isNaN(point1.y && !isNaN(point2.y))) {\n            // what percent of point1.y is point2.y\n            return (((parseInt(((point2.y / point1.y) * 100), 10)) - 100) * (-1));\n        }\n    }\n    return NaN;\n};\n\nexport const getRegionSource = (data) => {\n    let _regionData = [];\n    if (typeof data === \"object\") {\n        for (let key in data) {\n            if (data.hasOwnProperty(key)) {\n                let _inst = {\n                    label: ucFirst(key),\n                    value: key\n                }\n                _regionData.push(_inst);\n            }\n        }\n    }\n    return _regionData;\n};\n\nexport const getWatershedSource = (data,region=null) => {\n    let _watershedData = [];\n    if (region !== null) {\n        if (typeof data[region] === \"object\") {\n            if (typeof data[region].watershed === \"object\") {\n                let regionData = data[region].watershed;\n                for (let key in regionData) {\n                    if (regionData.hasOwnProperty(key)) {\n                        let _inst = {\n                            label: ucFirst(regionData[key][\"name\"]),\n                            value: regionData[key][\"name\"]\n                        };\n                        _watershedData.push(_inst);\n                    }\n                }\n            }\n        }\n    }\n    return _watershedData;\n};\n"]},"metadata":{},"sourceType":"module"}