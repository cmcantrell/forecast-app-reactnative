{"ast":null,"code":"\"use strict\";\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/clinton/Apps/fc-reactnative/testapp/components/mainScreen/MainModal.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { dataStoreRegionKey, dataStoreWatershedKey, getData } from \"../../lib/helper/AsyncHelper\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setValidWaterdataRequestSubmitted, setRegion, setWatershed, setLocationSettingsLoaded } from \"../../lib/store/actions/waterdata\";\nimport RegionPicker from \"./RegionPicker\";\nimport WatershedPicker from \"./WatershedPicker\";\nimport styleConstants from \"../../assets/style-constants\";\nexport default function MainModal() {\n  var dispatch = useDispatch();\n  var region = useSelector(function (state) {\n    return state.waterdata.region;\n  }),\n      watershed = useSelector(function (state) {\n    return state.waterdata.watershed;\n  }),\n      validWaterdataRequestSubmitted = useSelector(function (state) {\n    return state.waterdata.validWaterdataRequestSubmitted;\n  }),\n      locationSettingsLoaded = useSelector(function (state) {\n    return state.waterdata.locationSettingsLoaded;\n  });\n\n  var setDataRequestSubmittedHandler = function setDataRequestSubmittedHandler(val) {\n    if (typeof val !== \"boolean\") {\n      val = false;\n    }\n\n    ;\n\n    if (region === null || watershed == null) {\n      val === false;\n    }\n\n    ;\n    dispatch(setValidWaterdataRequestSubmitted(val));\n  };\n\n  var content = React.createElement(Text, {\n    style: {\n      color: \"black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 19\n    }\n  }, \"Something in MainModal isn't loading\");\n  var buttonDisabled = true;\n\n  var buttonStyles = _objectSpread(_objectSpread({}, styles.button), styles.buttonDisabled);\n\n  if (region != null && watershed != null) {\n    console.log(\"@mainmodal.region/watershed\", region, watershed);\n    buttonDisabled = false;\n    buttonStyles = styles.button;\n  }\n\n  if (region == null && watershed == null && locationSettingsLoaded == false) {\n    getData(dataStoreRegionKey).then(function (response) {\n      if (response != null) {\n        if (region == null) {\n          region = response;\n          dispatch(setRegion(response));\n        }\n\n        getData(dataStoreWatershedKey).then(function (_response) {\n          if (_response != null) {\n            if (watershed == null) {\n              watershed = _response;\n              dispatch(setWatershed(_response));\n\n              if (region !== null && watershed !== null) {\n                dispatch(setLocationSettingsLoaded(true));\n              }\n            }\n          }\n        });\n      }\n    });\n  }\n\n  if (validWaterdataRequestSubmitted !== true) {\n    content = React.createElement(View, {\n      style: styles.modalContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }\n    }, React.createElement(Modal, {\n      animationType: \"slide\",\n      presentationStyle: \"fullScreen\",\n      visible: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: {\n        paddingTop: 200\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }, React.createElement(RegionPicker, {\n      selectedValue: region,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }\n    }), React.createElement(WatershedPicker, {\n      selectedValue: watershed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    }), React.createElement(View, {\n      styles: styles.button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }, React.createElement(TouchableOpacity, {\n      style: buttonStyles,\n      onPress: function onPress() {\n        setDataRequestSubmittedHandler(true);\n      },\n      underlayColor: styleConstants.colors.burntOrange,\n      disabled: buttonDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }\n    }, React.createElement(Text, {\n      style: styles.buttonText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 29\n      }\n    }, \"GET DATA\"))), React.createElement(Text, {\n      style: {\n        width: \"90%\",\n        marginLeft: \"5%\",\n        marginTop: 20,\n        fontSize: 11,\n        textAlign: \"center\",\n        color: styleConstants.colors.lightGrey\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }, \"contact, support & FAQ details can be found on the Settings tab. Contact support if you don't see your local waters.\"))));\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, content);\n}\nvar styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    height: \"auto\",\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-start\"\n  },\n  modalContainer: {\n    width: \"100%\",\n    height: \"auto\",\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-start\"\n  },\n  button: {\n    marginRight: 80,\n    marginLeft: 80,\n    marginTop: 40,\n    paddingTop: 10,\n    paddingBottom: 10,\n    backgroundColor: styleConstants.colors.burntOrange,\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: styleConstants.fonts.bodyFontColor\n  },\n  buttonDisabled: styleConstants.buttons.disabled,\n  buttonText: {\n    color: styleConstants.fonts.bodyFontColor,\n    textAlign: 'center',\n    paddingLeft: 10,\n    paddingRight: 10,\n    fontFamily: styleConstants.headerFontFamily,\n    fontSize: 18\n  }\n});","map":{"version":3,"sources":["/Users/clinton/Apps/fc-reactnative/testapp/components/mainScreen/MainModal.tsx"],"names":["React","dataStoreRegionKey","dataStoreWatershedKey","getData","useSelector","useDispatch","setValidWaterdataRequestSubmitted","setRegion","setWatershed","setLocationSettingsLoaded","RegionPicker","WatershedPicker","styleConstants","MainModal","dispatch","region","state","waterdata","watershed","validWaterdataRequestSubmitted","locationSettingsLoaded","setDataRequestSubmittedHandler","val","content","color","buttonDisabled","buttonStyles","styles","button","console","log","then","response","_response","modalContainer","paddingTop","colors","burntOrange","buttonText","width","marginLeft","marginTop","fontSize","textAlign","lightGrey","container","StyleSheet","create","height","flex","alignItems","justifyContent","marginRight","paddingBottom","backgroundColor","borderRadius","borderWidth","borderColor","fonts","bodyFontColor","buttons","disabled","paddingLeft","paddingRight","fontFamily","headerFontFamily"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport React from \"react\";\nimport { StyleSheet, Text, View, Modal, TouchableOpacity } from \"react-native\";\nimport { dataStoreRegionKey, dataStoreWatershedKey, getData } from \"../../lib/helper/AsyncHelper\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setValidWaterdataRequestSubmitted, setRegion, setWatershed, setLocationSettingsLoaded } from \"../../lib/store/actions/waterdata\";\nimport RegionPicker from \"./RegionPicker\";\nimport WatershedPicker from \"./WatershedPicker\";\nimport styleConstants from \"../../assets/style-constants\";\n\nexport default function MainModal() {\n\n    const dispatch = useDispatch();\n\n    let region = useSelector(state => state.waterdata.region),\n        watershed = useSelector(state => state.waterdata.watershed),\n        validWaterdataRequestSubmitted = useSelector(state => state.waterdata.validWaterdataRequestSubmitted),\n        locationSettingsLoaded = useSelector(state => state.waterdata.locationSettingsLoaded);\n\n    const setDataRequestSubmittedHandler = (val) => {\n        if (typeof val !== \"boolean\") {\n            val = false;\n        };\n        if (region === null || watershed == null) {\n            val === false;\n        };\n        dispatch(setValidWaterdataRequestSubmitted(val));\n    };\n\n    let content = <Text style={{ color: \"black\" }}>Something in MainModal isn't loading</Text>;\n    let buttonDisabled = true;\n    let buttonStyles = { ...styles.button, ...styles.buttonDisabled };\n    if (region != null && watershed != null) {\n        console.log(\"@mainmodal.region/watershed\", region, watershed);\n        buttonDisabled = false;\n        buttonStyles = styles.button;\n    }\n    if (region == null && watershed == null && locationSettingsLoaded == false) {\n        // load location settings on intial app load\n        getData(dataStoreRegionKey).then((response) => {\n            if (response != null) {\n                if (region == null) {\n                    region = response;\n                    dispatch(setRegion(response));\n                }\n                getData(dataStoreWatershedKey).then((_response) => {\n                    if (_response != null) {\n                        if (watershed == null) {\n                            watershed = _response;\n                            dispatch(setWatershed(_response));\n                            if (region !== null && watershed !== null) {\n                                dispatch(setLocationSettingsLoaded(true));\n                            }\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    if (validWaterdataRequestSubmitted !== true) {\n        content = <View style={styles.modalContainer}>\n            <Modal animationType=\"slide\"\n                presentationStyle=\"fullScreen\"\n                visible={true}\n            >\n                <View style={{paddingTop:200}}>\n                    <RegionPicker selectedValue={region} />\n                    <WatershedPicker selectedValue={watershed} />\n                    <View styles={styles.button}>\n                        <TouchableOpacity\n                            style={buttonStyles}\n                            onPress={() => {\n                                setDataRequestSubmittedHandler(true);\n                            }}\n                            underlayColor={styleConstants.colors.burntOrange}\n                            disabled={buttonDisabled} >\n                            <Text style={styles.buttonText}>GET DATA</Text>\n                        </TouchableOpacity>\n                    </View>\n                    <Text style={{width:\"90%\",marginLeft:\"5%\",marginTop:20,fontSize:11,textAlign:\"center\",color:styleConstants.colors.lightGrey}}>contact, support & FAQ details can be found on the Settings tab. Contact support if you don't see your local waters.</Text>\n                </View>\n            </Modal>\n        </View>\n    }\n\n    return (\n        <View style={styles.container}>\n            {content}\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        width: \"100%\",\n        height: \"auto\",\n        flex: 1,\n        alignItems: \"center\",\n        justifyContent: \"flex-start\",\n    },\n    modalContainer: {\n        width: \"100%\",\n        height: \"auto\",\n        flex: 1,\n        alignItems: \"center\",\n        justifyContent: \"flex-start\"\n    },\n    button: {\n        marginRight: 80,\n        marginLeft: 80,\n        marginTop: 40,\n        paddingTop: 10,\n        paddingBottom: 10,\n        backgroundColor: styleConstants.colors.burntOrange,\n        borderRadius: 10,\n        borderWidth: 1,\n        borderColor: styleConstants.fonts.bodyFontColor\n    },\n    buttonDisabled: styleConstants.buttons.disabled,\n    buttonText: {\n        color: styleConstants.fonts.bodyFontColor,\n        textAlign: 'center',\n        paddingLeft: 10,\n        paddingRight: 10,\n        fontFamily: styleConstants.headerFontFamily,\n        fontSize: 18\n    }\n});\n"]},"metadata":{},"sourceType":"module"}