{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/clinton/Apps/fc-reactnative/testapp/components/settingsScreen/LocationSettings.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Picker } from '@react-native-picker/picker';\nimport Collapsible from 'react-native-collapsible';\nimport { Ionicons } from '@expo/vector-icons';\nimport { dataStoreRegionKey, dataStoreWatershedKey, setData, getData } from \"../../lib/helper/AsyncHelper\";\nimport { getRegionSource, getWatershedSource } from \"../../lib/helper/Helper\";\nimport Waterdata from \"../../lib/datasource/waterdata\";\nimport styleConstants from \"../../assets/style-constants\";\n\nvar LocationSettings = function (_Component) {\n  _inherits(LocationSettings, _Component);\n\n  var _super = _createSuper(LocationSettings);\n\n  function LocationSettings(props) {\n    var _this;\n\n    _classCallCheck(this, LocationSettings);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      selectedRegion: null,\n      savedRegion: null,\n      selectedWatershed: null,\n      savedWatershed: null,\n      isCollapsed: true,\n      transactionInProgress: false\n    };\n\n    _this._componentWillMount();\n\n    return _this;\n  }\n\n  _createClass(LocationSettings, [{\n    key: \"_componentWillMount\",\n    value: function _componentWillMount() {\n      var _this2 = this;\n\n      getData(dataStoreRegionKey).then(function (response) {\n        if (response != null) {\n          if (_this2.state.selectedRegion == null) {\n            _this2.state.selectedRegion = response;\n          }\n\n          getData(dataStoreWatershedKey).then(function (_response) {\n            if (_response != null) {\n              if (_this2.state.selectedWatershed == null) {\n                _this2.state.selectedWatershed = _response;\n              }\n            }\n          });\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"setSelectedRegion\",\n    value: function setSelectedRegion(val) {\n      return this.setState({\n        selectedRegion: val\n      });\n    }\n  }, {\n    key: \"setSelectedWatershed\",\n    value: function setSelectedWatershed(val) {\n      return this.setState({\n        selectedWatershed: val\n      });\n    }\n  }, {\n    key: \"getRegionPickerItems\",\n    value: function getRegionPickerItems() {\n      var regionSource = getRegionSource(Waterdata.region);\n      return this._getPickerItems(regionSource);\n    }\n  }, {\n    key: \"getWatershedPickerItems\",\n    value: function getWatershedPickerItems() {\n      var regionSource = getWatershedSource(Waterdata.region, this.state.selectedRegion);\n      return this._getPickerItems(regionSource);\n    }\n  }, {\n    key: \"_getPickerItems\",\n    value: function _getPickerItems(source) {\n      var _this3 = this;\n\n      var items = source.map(function (sourceItem, i) {\n        return React.createElement(Picker.Item, {\n          label: sourceItem.label,\n          value: sourceItem.value,\n          key: i,\n          color: styleConstants.fonts.bodyFontColor,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 20\n          }\n        });\n      });\n      return items;\n    }\n  }, {\n    key: \"setIsCollapsedHandler\",\n    value: function setIsCollapsedHandler(val) {\n      if (typeof val !== \"boolean\") {\n        val = false;\n      }\n\n      this.setState({\n        isCollapsed: val\n      });\n    }\n  }, {\n    key: \"toggleStatuesIndicator\",\n    value: function toggleStatuesIndicator() {\n      var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      switch (status) {\n        case true:\n          console.log(\"muthafuckas on\");\n          this.setState({\n            transactionInProgress: true\n          });\n          break;\n\n        case false:\n        default:\n          console.log(\"muthafuckas off\");\n          this.setState({\n            transactionInProgress: false\n          });\n          break;\n      }\n\n      this.setState({\n        transactionInProgress: status\n      });\n    }\n  }, {\n    key: \"saveSettings\",\n    value: function saveSettings() {\n      var _this4 = this;\n\n      this.toggleStatuesIndicator(true);\n      var region = setData(dataStoreRegionKey, this.state.selectedRegion);\n      region.then(function (res) {\n        if (res == true) {\n          var watershed = setData(dataStoreWatershedKey, _this4.state.selectedWatershed);\n          watershed.then(function (_res) {\n            if (_res == true) {\n              _this4.toggleStatuesIndicator(false);\n            }\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var collapsabelIconColor = styleConstants.fonts.bodyFontColor;\n\n      if (!this.state.isCollapsed) {\n        collapsabelIconColor = styleConstants.colors.medGrey;\n      }\n\n      return React.createElement(View, {\n        style: styles.settingGroup,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.settingGroupHeader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: styles.settingGroupHeaderTitle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }\n      }, \"Set your default location.\"), React.createElement(Ionicons, {\n        style: {\n          width: \"10%\",\n          marginTop: -6\n        },\n        name: \"add\",\n        size: 32,\n        color: collapsabelIconColor,\n        onPress: function onPress() {\n          var _isCollapsed;\n\n          if (_this5.state.isCollapsed == true) {\n            _isCollapsed = false;\n          } else {\n            _isCollapsed = true;\n          }\n\n          _this5.setIsCollapsedHandler(_isCollapsed);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }\n      })), React.createElement(Collapsible, {\n        collapsed: this.state.isCollapsed,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: styles.settingGroupHeaderNote,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }\n      }, \"Select State & Watershed to preload the app location, or leave the watershed blank to just select a State. Leave both blank to start with a clean slate each time you open the app. Update your settings & click the Save location Settings button below.\"), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: styles.subtitle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }\n      }, \"Set your default Home Region\"), React.createElement(Text, {\n        style: styles.settingGroupHeaderNote,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }\n      }, \"Selecting a default State will auto-select that region, when the app loads.\"), React.createElement(Picker, {\n        selectedValue: this.state.selectedRegion,\n        style: {\n          height: 160\n        },\n        itemStyle: {\n          height: 120\n        },\n        onValueChange: function onValueChange(val, i) {\n          _this5.setSelectedRegion(val);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }\n      }, React.createElement(Picker.Item, {\n        label: \"-- select a region --\",\n        value: null,\n        color: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 29\n        }\n      }), this.getRegionPickerItems())), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: styles.subtitle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }\n      }, \"Set your default Home Watershed\"), React.createElement(Text, {\n        style: styles.settingGroupHeaderNote,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }\n      }, \"Select a watershed to auto-load the app, or leave blank.  Leaving blank with a State set, will auto-load all state data.\"), React.createElement(Picker, {\n        selectedValue: this.state.selectedWatershed,\n        style: {\n          height: 160\n        },\n        itemStyle: {\n          height: 120\n        },\n        onValueChange: function onValueChange(val, i) {\n          _this5.setSelectedWatershed(val);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }\n      }, React.createElement(Picker.Item, {\n        label: \"-- select a watershed --\",\n        value: null,\n        color: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 29\n        }\n      }), this.getWatershedPickerItems())), React.createElement(View, {\n        styles: styles.button,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }\n      }, React.createElement(TouchableOpacity, {\n        style: styles.button,\n        onPress: function onPress() {\n          _this5.saveSettings();\n        },\n        underlayColor: styleConstants.colors.burntOrange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }\n      }, React.createElement(Text, {\n        style: styles.buttonText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 29\n        }\n      }, \"Save Location Settings\"))), React.createElement(View, {\n        styles: styles.button,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }\n      }, React.createElement(TouchableOpacity, {\n        style: styles.buttonDanger,\n        onPress: function onPress() {\n          setData(dataStoreRegionKey, null);\n          setData(dataStoreWatershedKey, null);\n\n          _this5.setSelectedRegion(null);\n\n          _this5.setSelectedWatershed(null);\n        },\n        underlayColor: styleConstants.colors.dangerRed,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }\n      }, React.createElement(Text, {\n        style: styles.buttonText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 29\n        }\n      }, \"Reset Location Settings\")))));\n    }\n  }]);\n\n  return LocationSettings;\n}(Component);\n\nexport default LocationSettings;\nvar styles = StyleSheet.create({\n  settingGroup: {\n    width: \"90%\",\n    borderBottomWidth: 1,\n    borderBottomColor: \"white\",\n    paddingBottom: 20,\n    marginBottom: 20\n  },\n  settingGroupHeader: {\n    flexDirection: \"row\"\n  },\n  settingGroupHeaderTitle: {\n    width: \"90%\",\n    fontFamily: styleConstants.fonts.headerFontFamily,\n    color: styleConstants.fonts.bodyFontColor,\n    fontSize: 21,\n    fontWeight: 'bold'\n  },\n  settingGroupHeaderNote: {\n    fontFamily: styleConstants.fonts.bodyFontFamily,\n    color: styleConstants.fonts.noteFontColor,\n    fontSize: 12,\n    marginTop: 10,\n    marginBottom: 20,\n    fontStyle: \"italic\",\n    lineHeight: 18,\n    marginLeft: 10,\n    marginRight: 10\n  },\n  subtitle: {\n    color: styleConstants.fonts.bodyFontColor,\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  button: {\n    width: \"100%\",\n    alignSelf: 'stretch',\n    marginTop: 10,\n    paddingTop: 10,\n    paddingBottom: 10,\n    backgroundColor: styleConstants.colors.burntOrange,\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: styleConstants.fonts.bodyFontColor\n  },\n  buttonDanger: {\n    width: \"100%\",\n    alignSelf: 'stretch',\n    marginTop: 10,\n    paddingTop: 10,\n    paddingBottom: 10,\n    backgroundColor: styleConstants.colors.dangerRed,\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: styleConstants.fonts.bodyFontColor\n  },\n  buttonText: {\n    width: \"100%\",\n    color: styleConstants.fonts.bodyFontColor,\n    textAlign: 'center',\n    paddingLeft: 10,\n    paddingRight: 10,\n    fontFamily: styleConstants.headerFontFamily,\n    fontSize: 20\n  }\n});","map":{"version":3,"sources":["/Users/clinton/Apps/fc-reactnative/testapp/components/settingsScreen/LocationSettings.tsx"],"names":["React","Component","Picker","Collapsible","Ionicons","dataStoreRegionKey","dataStoreWatershedKey","setData","getData","getRegionSource","getWatershedSource","Waterdata","styleConstants","LocationSettings","props","state","selectedRegion","savedRegion","selectedWatershed","savedWatershed","isCollapsed","transactionInProgress","_componentWillMount","then","response","_response","val","setState","regionSource","region","_getPickerItems","source","items","map","sourceItem","i","label","value","fonts","bodyFontColor","status","console","log","toggleStatuesIndicator","res","watershed","_res","collapsabelIconColor","colors","medGrey","styles","settingGroup","settingGroupHeader","settingGroupHeaderTitle","width","marginTop","_isCollapsed","setIsCollapsedHandler","settingGroupHeaderNote","subtitle","height","setSelectedRegion","getRegionPickerItems","setSelectedWatershed","getWatershedPickerItems","button","saveSettings","burntOrange","buttonText","buttonDanger","dangerRed","StyleSheet","create","borderBottomWidth","borderBottomColor","paddingBottom","marginBottom","flexDirection","fontFamily","headerFontFamily","color","fontSize","fontWeight","bodyFontFamily","noteFontColor","fontStyle","lineHeight","marginLeft","marginRight","alignSelf","paddingTop","backgroundColor","borderRadius","borderWidth","borderColor","textAlign","paddingLeft","paddingRight"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport React, { Component } from \"react\";\nimport { StyleSheet, Text, View, TouchableOpacity } from \"react-native\";\nimport { Picker } from '@react-native-picker/picker';\nimport Collapsible from 'react-native-collapsible';\nimport { Ionicons } from '@expo/vector-icons';\nimport { dataStoreRegionKey, dataStoreWatershedKey, setData, getData } from \"../../lib/helper/AsyncHelper\";\nimport { getRegionSource, getWatershedSource } from \"../../lib/helper/Helper\";\nimport Waterdata from \"../../lib/datasource/waterdata\";\nimport styleConstants from \"../../assets/style-constants\";\n\nclass LocationSettings extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedRegion: null,\n            savedRegion: null,\n            selectedWatershed: null,\n            savedWatershed: null,\n            isCollapsed: true,\n            transactionInProgress: false\n        }\n        this._componentWillMount();\n    }\n\n    _componentWillMount() {\n        getData(dataStoreRegionKey).then((response) => {\n            if (response != null) {\n                if (this.state.selectedRegion == null) {\n                    this.state.selectedRegion = response;\n                    // console.log(\"@LocationSettings._componentDidMount\",response);\n                }\n                getData(dataStoreWatershedKey).then((_response) => {\n                    if (_response != null) {\n                        if (this.state.selectedWatershed == null) {\n                            this.state.selectedWatershed = _response;\n                            // console.log(\"@LocationSettings._componentDidMount\",_response);\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    componentWillUnmount(){\n        // console.log(\"LocationSettings.componentWillUnmount()\");\n    }\n\n    /**\n     * picker data functions\n     */\n    setSelectedRegion(val) {\n        return this.setState({ selectedRegion: val });\n    }\n\n    setSelectedWatershed(val) {\n        return this.setState({ selectedWatershed: val });\n    }\n\n    getRegionPickerItems() {\n        let regionSource = getRegionSource(Waterdata.region);\n        return this._getPickerItems(regionSource);\n    }\n\n    getWatershedPickerItems() {\n        let regionSource = getWatershedSource(Waterdata.region, this.state.selectedRegion);\n        return this._getPickerItems(regionSource);\n    }\n\n    _getPickerItems(source) {\n        let items = source.map((sourceItem, i) => {\n            return <Picker.Item label={sourceItem.label} value={sourceItem.value} key={i} color={styleConstants.fonts.bodyFontColor} />\n        });\n        return items;\n    }\n\n    setIsCollapsedHandler(val) {\n        if (typeof val !== \"boolean\") {\n            val = false;\n        }\n        this.setState({ isCollapsed: val });\n    }\n\n    toggleStatuesIndicator(status=false){\n        switch(status){\n            case true : \n                console.log(\"muthafuckas on\")\n                this.setState({transactionInProgress:true});\n                break;\n            case false :\n            default :\n                console.log(\"muthafuckas off\")\n                this.setState({transactionInProgress:false});\n                break;\n        }\n        this.setState({transactionInProgress:status});\n    }\n\n    saveSettings(){\n        this.toggleStatuesIndicator(true);\n        let region = setData(dataStoreRegionKey, this.state.selectedRegion);\n        region.then((res)=>{\n            if(res == true){\n                let watershed = setData(dataStoreWatershedKey, this.state.selectedWatershed);\n                watershed.then((_res)=>{\n                    if(_res == true){\n                        this.toggleStatuesIndicator(false);\n                    }\n                });\n            }\n        });\n    }\n\n    render() {\n        /**\n         * display variables\n         */\n        let collapsabelIconColor = styleConstants.fonts.bodyFontColor;\n        if (!this.state.isCollapsed) {\n            collapsabelIconColor = styleConstants.colors.medGrey;\n        }\n        return (\n            <View style={styles.settingGroup}>\n                <View style={styles.settingGroupHeader}>\n                    <Text style={styles.settingGroupHeaderTitle}>Set your default location.</Text>\n                    <Ionicons\n                        style={{ width: \"10%\", marginTop: -6 }}\n                        name=\"add\"\n                        size={32}\n                        color={collapsabelIconColor}\n                        onPress={() => {\n                            let _isCollapsed;\n                            if (this.state.isCollapsed == true) {\n                                _isCollapsed = false;\n                            } else {\n                                _isCollapsed = true;\n                            }\n                            this.setIsCollapsedHandler(_isCollapsed);\n                        }}\n                    />\n                </View>\n                <Collapsible collapsed={this.state.isCollapsed}>\n                    <Text style={styles.settingGroupHeaderNote}>Select State & Watershed to preload the app location, or leave the watershed blank to just select a State. Leave both blank to start with a clean slate each time you open the app. Update your settings & click the Save location Settings button below.</Text>\n                    <View>\n                        <Text style={styles.subtitle}>Set your default Home Region</Text>\n                        <Text style={styles.settingGroupHeaderNote}>Selecting a default State will auto-select that region, when the app loads.</Text>\n                        <Picker\n                            selectedValue={this.state.selectedRegion}\n                            style={{ height: 160 }}\n                            itemStyle={{ height: 120 }}\n                            onValueChange={(val, i) => {\n                                this.setSelectedRegion(val);\n                            }}\n                        >\n                            <Picker.Item label=\"-- select a region --\" value={null} color={\"white\"} />\n                            {this.getRegionPickerItems()}\n                        </Picker>\n                    </View>\n                    <View>\n                        <Text style={styles.subtitle}>Set your default Home Watershed</Text>\n                        <Text style={styles.settingGroupHeaderNote}>Select a watershed to auto-load the app, or leave blank.  Leaving blank with a State set, will auto-load all state data.</Text>\n                        <Picker\n                            selectedValue={this.state.selectedWatershed}\n                            style={{ height: 160 }}\n                            itemStyle={{ height: 120 }}\n                            onValueChange={(val, i) => {\n                                this.setSelectedWatershed(val);\n                            }}\n                        >\n                            <Picker.Item label=\"-- select a watershed --\" value={null} color={\"white\"} />\n                            {this.getWatershedPickerItems()}\n                        </Picker>\n                    </View>\n                    <View styles={styles.button}>\n                        <TouchableOpacity\n                            style={styles.button}\n                            onPress={() => {\n                                this.saveSettings();\n                            }}\n                            underlayColor={styleConstants.colors.burntOrange} >\n                            <Text style={styles.buttonText}>Save Location Settings</Text>\n                        </TouchableOpacity>\n                    </View>\n                    <View styles={styles.button}>\n                        <TouchableOpacity\n                            style={styles.buttonDanger}\n                            onPress={() => {\n                                setData(dataStoreRegionKey, null);\n                                setData(dataStoreWatershedKey, null);\n                                this.setSelectedRegion(null);\n                                this.setSelectedWatershed(null);\n                            }}\n                            underlayColor={styleConstants.colors.dangerRed} >\n                            <Text style={styles.buttonText}>Reset Location Settings</Text>\n                        </TouchableOpacity>\n                    </View>\n                </Collapsible>\n            </View>\n        )\n    }\n}\nexport default LocationSettings;\n\nconst styles = StyleSheet.create({\n    settingGroup: {\n        width: \"90%\",\n        borderBottomWidth: 1,\n        borderBottomColor: \"white\",\n        paddingBottom: 20,\n        marginBottom: 20\n    },\n    settingGroupHeader: {\n        flexDirection: \"row\"\n    },\n    settingGroupHeaderTitle: {\n        width: \"90%\",\n        fontFamily: styleConstants.fonts.headerFontFamily,\n        color: styleConstants.fonts.bodyFontColor,\n        fontSize: 21,\n        fontWeight: 'bold'\n    },\n    settingGroupHeaderNote: {\n        fontFamily: styleConstants.fonts.bodyFontFamily,\n        color: styleConstants.fonts.noteFontColor,\n        fontSize: 12,\n        marginTop: 10,\n        marginBottom: 20,\n        fontStyle: \"italic\",\n        lineHeight: 18,\n        marginLeft: 10,\n        marginRight: 10,\n    },\n    subtitle: {\n        color: styleConstants.fonts.bodyFontColor,\n        fontSize: 16,\n        fontWeight: 'bold',\n    },\n    button: {\n        width: \"100%\",\n        alignSelf: 'stretch',\n        marginTop: 10,\n        paddingTop: 10,\n        paddingBottom: 10,\n        backgroundColor: styleConstants.colors.burntOrange,\n        borderRadius: 10,\n        borderWidth: 1,\n        borderColor: styleConstants.fonts.bodyFontColor\n    },\n    buttonDanger: {\n        width: \"100%\",\n        alignSelf: 'stretch',\n        marginTop: 10,\n        paddingTop: 10,\n        paddingBottom: 10,\n        backgroundColor: styleConstants.colors.dangerRed,\n        borderRadius: 10,\n        borderWidth: 1,\n        borderColor: styleConstants.fonts.bodyFontColor\n    },\n    buttonText: {\n        width: \"100%\",\n        color: styleConstants.fonts.bodyFontColor,\n        textAlign: 'center',\n        paddingLeft: 10,\n        paddingRight: 10,\n        fontFamily: styleConstants.headerFontFamily,\n        fontSize: 20\n    }\n});"]},"metadata":{},"sourceType":"module"}