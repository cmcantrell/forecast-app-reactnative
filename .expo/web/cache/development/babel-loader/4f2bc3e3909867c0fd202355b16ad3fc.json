{"ast":null,"code":"\"use strict\";\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { parseUSGS } from \"./USGSHelper\";\nimport { parseDWR } from \"./DWRHelper\";\nexport var parseRequestParamsToString = function parseRequestParamsToString(params) {\n  var paramsString = \"\",\n      i = 0;\n\n  for (var _i = 0, _Object$entries = Object.entries(params); _i < _Object$entries.length; _i++) {\n    var _ref = _Object$entries[_i];\n\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var key = _ref2[0];\n    var value = _ref2[1];\n\n    if (i == 0) {\n      paramsString += \"?\";\n    }\n\n    if (key == \"max-measDate\" || key == \"min-measDate\") {\n      var now = new Date();\n\n      switch (key) {\n        case \"max-measDate\":\n          var month = (\"0\" + (now.getMonth() + 1)).slice(-2),\n              day = (\"0\" + now.getDate()).slice(-2),\n              year = now.getFullYear(),\n              hour = now.getHours(),\n              minute = \"00\";\n          var timeFormat = month + \"/\" + day + \"/\" + year + \"_\" + hour + \":\" + minute;\n          paramsString += key + \"=\" + encodeURIComponent(timeFormat);\n          break;\n\n        case \"min-measDate\":\n          var _7out = new Date(now.setDate(now.getDate() - 8)),\n              _7outMonth = (\"0\" + (_7out.getMonth() + 1)).slice(-2),\n              _7outDay = (\"0\" + _7out.getDate()).slice(-2),\n              _7outYear = _7out.getFullYear(),\n              _7outHour = (\"0\" + _7out.getHours()).slice(-2),\n              _7outminute = \"00\";\n\n          var _7outTimeFormat = _7outMonth + \"/\" + _7outDay + \"/\" + _7outYear + \"_\" + _7outHour + \":\" + _7outminute;\n\n          paramsString += key + \"=\" + encodeURIComponent(_7outTimeFormat);\n          break;\n\n        default:\n          break;\n      }\n    } else {\n      paramsString += key + \"=\" + encodeURI(value);\n    }\n\n    if (i >= 0 && i < Object.entries(params).length - 1) {\n      paramsString += \"&\";\n    }\n\n    i++;\n  }\n\n  return paramsString;\n};\nexport var parseWaterDataResponse = function parseWaterDataResponse(request, response) {\n  var parsed = {};\n\n  switch (request.url) {\n    case \"https://waterservices.usgs.gov/nwis/iv/\":\n      parsed = parseUSGS(response);\n      break;\n\n    case \"https://dwr.state.co.us/Rest/GET/api/v2/surfacewater/surfacewatertsday/\":\n    case \"https://dwr.state.co.us/Rest/GET/api/v2/telemetrystations/telemetrytimeseriesday/\":\n      parsed = parseDWR(response);\n      break;\n\n    default:\n      break;\n  }\n\n  return parsed;\n};","map":{"version":3,"sources":["/Users/clinton/Apps/fc-reactnative/testapp/lib/helper/ApiHelper.js"],"names":["parseUSGS","parseDWR","parseRequestParamsToString","params","paramsString","i","Object","entries","key","value","now","Date","month","getMonth","slice","day","getDate","year","getFullYear","hour","getHours","minute","timeFormat","encodeURIComponent","_7out","setDate","_7outMonth","_7outDay","_7outYear","_7outHour","_7outminute","_7outTimeFormat","encodeURI","length","parseWaterDataResponse","request","response","parsed","url"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { parseUSGS } from \"./USGSHelper\";\nimport { parseDWR } from \"./DWRHelper\";\n\nexport const parseRequestParamsToString = (params) => {\n    let paramsString = \"\",\n        i = 0;\n    for (let [key, value] of Object.entries(params)) {\n        if (i == 0) {\n            paramsString += \"?\";\n        }\n        if (key == \"max-measDate\" || key == \"min-measDate\") {\n            let now = new Date();\n            switch (key) {\n                case \"max-measDate\":\n                    let month = (\"0\" + (now.getMonth() + 1)).slice(-2),\n                        day = (\"0\" + now.getDate()).slice(-2),\n                        year = now.getFullYear(),\n                        hour = now.getHours(),\n                        // minute = now.getMinutes();\n                        minute = \"00\";\n                    let timeFormat = `${month}/${day}/${year}_${hour}:${minute}`;\n                    paramsString += `${key}=${encodeURIComponent(timeFormat)}`;\n                    break;\n                case \"min-measDate\":\n                    let _7out = new Date(now.setDate(now.getDate() - 8)),\n                        _7outMonth = (\"0\" + (_7out.getMonth() + 1)).slice(-2),\n                        _7outDay = (\"0\" + _7out.getDate()).slice(-2),\n                        _7outYear = _7out.getFullYear(),\n                        _7outHour = (\"0\" + _7out.getHours()).slice(-2),\n                        // _7outminute = (\"0\" + _7out.getMinutes()).slice(-2);\n                        _7outminute = \"00\";\n                    let _7outTimeFormat = `${_7outMonth}/${_7outDay}/${_7outYear}_${_7outHour}:${_7outminute}`;\n                    paramsString += `${key}=${encodeURIComponent(_7outTimeFormat)}`;\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            paramsString += `${key}=${encodeURI(value)}`;\n        }\n\n        if (i >= 0 && i < (Object.entries(params).length - 1)) {\n            paramsString += \"&\";\n        }\n        i++;\n    }\n    return paramsString;\n};\n\nexport const parseWaterDataResponse = (request, response) => {\n    let parsed = {};\n    // console.log(request.url);\n    switch (request.url) {\n        case \"https://waterservices.usgs.gov/nwis/iv/\":\n            parsed = parseUSGS(response);\n            break;\n        case \"https://dwr.state.co.us/Rest/GET/api/v2/surfacewater/surfacewatertsday/\":\n        case \"https://dwr.state.co.us/Rest/GET/api/v2/telemetrystations/telemetrytimeseriesday/\":\n            parsed =  parseDWR(response);\n            break;\n        default:\n            break;\n    }\n    return parsed;\n};\n\n"]},"metadata":{},"sourceType":"module"}