{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\nexport default function useCachedResources() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setLoadingComplete = _React$useState2[1];\n\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              SplashScreen.preventAutoHideAsync();\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread(_objectSpread({}, Ionicons.font), {}, {\n                \"pt-sans\": require(\"../assets/fonts/PTSansCaption-Bold.ttf\"),\n                \"work-sans\": require(\"../assets/fonts/WorkSans-Black.ttf\")\n              })));\n\n            case 4:\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(\"@hooks.useCachedResources.tsx\", \"error: \" + _context.t0);\n\n            case 9:\n              _context.prev = 9;\n              setLoadingComplete(true);\n              SplashScreen.hideAsync();\n              console.log(\"endcached\");\n              return _context.finish(9);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 6, 9, 14]], Promise);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n  return isLoadingComplete;\n}","map":{"version":3,"sources":["/Users/clinton/Apps/fc-reactnative/testapp/hooks/useCachedResources.ts"],"names":["Ionicons","Font","SplashScreen","React","useCachedResources","useState","isLoadingComplete","setLoadingComplete","useEffect","loadResourcesAndDataAsync","preventAutoHideAsync","loadAsync","font","require","console","log","hideAsync"],"mappings":";;;;;;;;AAAA,SAASA,QAAT,QAAyB,oBAAzB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAO,KAAKC,YAAZ,MAA8B,oBAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,eAAe,SAASC,kBAAT,GAA8B;AAAA,wBAEKD,KAAK,CAACE,QAAN,CAAe,KAAf,CAFL;AAAA;AAAA,MAEpCC,iBAFoC;AAAA,MAEjBC,kBAFiB;;AAI3CJ,EAAAA,KAAK,CAACK,SAAN,CAAgB,YAAM;AACpB,aAAeC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIP,cAAAA,YAAY,CAACQ,oBAAb;AAFJ;AAAA,+CAIUT,IAAI,CAACU,SAAL,iCACDX,QAAQ,CAACY,IADR;AAGJ,2BAAWC,OAAO,0CAHd;AAIJ,6BAAaA,OAAO;AAJhB,iBAJV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyBIC,cAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6C,uBAA7C;;AAzBJ;AAAA;AA2BIR,cAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAL,cAAAA,YAAY,CAACc,SAAb;AACAF,cAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AA7BJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgCAN,IAAAA,yBAAyB;AAC1B,GAlCD,EAkCG,EAlCH;AAoCA,SAAOH,iBAAP;AACD","sourcesContent":["import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  \n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          // 'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n          \"pt-sans\": require(\"../assets/fonts/PTSansCaption-Bold.ttf\"),\n          \"work-sans\": require(\"../assets/fonts/WorkSans-Black.ttf\")\n        });\n\n        // @debug begin moving JSON data to external source 12-2020\n        // try {\n        //   let response = await fetch('https://reactnative.dev/movies.json');\n        //   let json = await response.json();\n        //   console.log(\"we got the JSON\");\n        //   // now what? the best way to store this data?\n        // } catch (error) {\n        //   console.log(\"@hooks.useCachedResources.tsx\", \"error: \" + error);\n        // } finally {\n        // }\n\n\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.log(\"@hooks.useCachedResources.tsx\", \"error: \" + e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n        console.log(\"endcached\");\n      }\n    }\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n"]},"metadata":{},"sourceType":"module"}